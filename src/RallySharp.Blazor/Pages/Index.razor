@page "/"
@using System.Threading
@using RallySharp.Stages

@inject IJSRuntime _jsRuntime

<h1>Rally#</h1>
<div>
    Use arrows to move, press Shift to start
</div>
<canvas width="640" height="640" tabindex="1" @onkeydown="HandleKeyDown" @onkeyup="HandleKeyUp" @ref="ctrl">

</canvas>

@code
{
    private Timer timer;
    private GameState gameState;
    private Stage stage;
    private ElementReference ctrl;

    void HandleKeyDown(KeyboardEventArgs e) {

        switch (e.Code)
        {
            //case "ESC":
            //    form.Close();
            //    break;
            case "ShiftLeft":
            case "ShiftRight":
                stage.Fire.Set();
                break;
            case "ArrowLeft":
                stage.MoveLeft.Set();
                break;
            case "ArrowRight":
                stage.MoveRight.Set();
                break;
            case "ArrowUp":
                stage.MoveUp.Set();
                break;
            case "ArrowDown":
                stage.MoveDown.Set();
                break;
            default:
                break;
        }

    }

    void HandleKeyUp(KeyboardEventArgs e) {

        switch (e.Code)
        {
            case "ShiftLeft":
            case "ShiftRight":
                stage.Fire.Reset();
                break;
            case "ArrowLeft":
                stage.MoveLeft.Reset();
                break;
            case "ArrowRight":
                stage.MoveRight.Reset();
                break;
            case "ArrowUp":
                stage.MoveUp.Reset();
                break;
            case "ArrowDown":
                stage.MoveDown.Reset();
                break;
            default:
                break;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            stage = new Stage();

            await _jsRuntime.InvokeAsync<object>("setImage", "spritesheet", Convert.ToBase64String(Spritesheet.Data));
            await _jsRuntime.InvokeAsync<object>("setImage", "tilesheet", Convert.ToBase64String(Tilesheet.Data));
            await _jsRuntime.InvokeAsync<object>("setArray", "selected_tilemap", Tilemap.Data);
            await _jsRuntime.InvokeAsync<object>("setArray", "selected_tilesheetrects", Tilesheet.Rects);
            await _jsRuntime.InvokeAsync<object>("setArray", "selected_spritesheetrects", Spritesheet.Rects);

            gameState = new GameState();
            stage = new Stage
            {
                GameState = gameState
            };
            stage.GoToStart();

            var frameSetup = 30;
            var refrate = (int) Math.Round(1000.0 / frameSetup, 0);
            var framerate = 0;

            timer = new Timer(async xx =>
            {
                var start = DateTime.Now;
                
                await _jsRuntime.InvokeAsync<object>("setFocusToElement", ctrl);

                await _jsRuntime.InvokeAsync<object>("renderFrame", stage);
                stage.Update();

                var stop = DateTime.Now;
                framerate = (int)Math.Round(1000.0 / (stop - start).TotalMilliseconds, 0);
            }, null, frameSetup, refrate);
            
        }
    }
}